// <auto-generated />
using System;
using HospitalManager.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HospitalManager.Migrations
{
    [DbContext(typeof(HospitalManagerContext))]
    [Migration("20230127000846_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("HospitalManager.Models.Doktor", b =>
                {
                    b.Property<int>("DoktorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoktorID"), 1L, 1);

                    b.Property<string>("Adres")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Imie")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nazwisko")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OddzialID")
                        .HasColumnType("int");

                    b.Property<string>("Specjalizacja")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DoktorID");

                    b.HasIndex("OddzialID");

                    b.ToTable("Doktor");
                });

            modelBuilder.Entity("HospitalManager.Models.Oddzial", b =>
                {
                    b.Property<int>("OddzialID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OddzialID"), 1L, 1);

                    b.Property<string>("Nazwa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OddzialID");

                    b.ToTable("Oddzial");
                });

            modelBuilder.Entity("HospitalManager.Models.Pacjent", b =>
                {
                    b.Property<int>("PacjentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PacjentID"), 1L, 1);

                    b.Property<string>("Adres")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Imie")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nazwisko")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PESEL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PacjentID");

                    b.ToTable("Pacjent");
                });

            modelBuilder.Entity("HospitalManager.Models.Wizyta", b =>
                {
                    b.Property<int>("WizytaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WizytaID"), 1L, 1);

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoktorID")
                        .HasColumnType("int");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PacjentID")
                        .HasColumnType("int");

                    b.HasKey("WizytaID");

                    b.HasIndex("DoktorID");

                    b.HasIndex("PacjentID");

                    b.ToTable("Wizyta");
                });

            modelBuilder.Entity("HospitalManager.Models.Doktor", b =>
                {
                    b.HasOne("HospitalManager.Models.Oddzial", "Oddzial")
                        .WithMany()
                        .HasForeignKey("OddzialID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Oddzial");
                });

            modelBuilder.Entity("HospitalManager.Models.Wizyta", b =>
                {
                    b.HasOne("HospitalManager.Models.Doktor", "Doktor")
                        .WithMany()
                        .HasForeignKey("DoktorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalManager.Models.Pacjent", "Pacjent")
                        .WithMany()
                        .HasForeignKey("PacjentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doktor");

                    b.Navigation("Pacjent");
                });
#pragma warning restore 612, 618
        }
    }
}
